<Window x:Class="WPFPages.SqlDbViewer"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:Data="clr-namespace:WPFPages"
	xmlns:local="clr-namespace:WPFPages"
	xmlns:MyData="clr-namespace:WPFPages.Views" 
	xmlns:b="clr-namespace:WPFPages.Views"	   
	mc:Ignorable="d"
	xmlns:Convertors="clr-namespace:WPFPages.Views"
	DataContext="{Binding RelativeSource={RelativeSource self}}"
	Title="Database Edit/View Utility" 
	  Height="450" Width="860" 
	  MinHeight="450" MinWidth="860"
	  Left="1000"
	Loaded="OnWindowLoaded"
	  Top="20"
	WindowStartupLocation="Manual"
	WindowStyle="None"
	BorderThickness="0"	
	  GotFocus="Window_GotFocus"
	MouseDown="Window_MouseDown"
	  PreviewKeyDown="Window_PreviewKeyDown"
	Closed="Window_Closed">
	<!--d:DataContext="{d:DesignInstance Type=local:BankAccount}"-->


	<!--Never gets called - I use Mousedown to achieve this
	GotFocus ="Window_GotFocus"-->

	<Window.Resources>

		<!--This "BankAccountObs" is the OC we have declared in SqlDbViewer.cs
		AFAICT this triggers the OC to load in BankAccountObs.cs -->
		<!--<MyData:BankAccountObs x:Key="AllBankAccounts"/>
		<MyData:CustomerObs x:Key="AllCustomers"/>-->
		<!--<Convertors:DateOnlyConverter x:Key="dateOnlyConverter"/>-->

		<!--<Style x:Key="DecimalField" TargetType="TextBlock">			
			<TextBlock.Text="{Binding number, StringFormat={}{0:n2}}"/>
		</Style>-->

		<DataTemplate x:Key="BalanceTemplate" >
			<StackPanel >
				<Border Background="LightBlue" >
					<TextBlock Text="{Binding Balance, StringFormat={}{0:C}}"  />
				</Border>
			</StackPanel>
		</DataTemplate>

		<DataTemplate x:Key="EditBalanceTemplate">
			<TextBlock Focusable="True" Text="{Binding Balance, StringFormat='#####,###.00',UpdateSourceTrigger=PropertyChanged}"/>
		</DataTemplate>


		<Style x:Key="ToggleBkGrndOnmouseover" TargetType="Button">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" >
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
								<GradientStop Color="red" Offset="0"/>
								<GradientStop Color="DarkOrange" Offset="1"/>
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--Another Ellipse as a button-->
		<Style x:Key="ellip" TargetType="Button">
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="Width" Value="200" />
			<Setter Property="Height" Value="25" />
			<Setter Property="Background" Value="Green" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="FontWeight" Value="Medium" />
			<Setter Property="VerticalAlignment" Value="Top" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="HorizontalContentAlignment" Value="Right" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Content" Value="Black Text" />
			<!--Set to true to not get any properties from the themes.-->
			<!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Grid
							Height="80"	   
							Width="180">
							<Ellipse 
								Grid.Row="0"
								Grid.Column="0"
								Width="180"
								Height="77"
								Fill="LightGreen"/>
							<ContentPresenter HorizontalAlignment="Center"
										VerticalAlignment="Center"/>
						</Grid>

					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--How to OVERRIDE the default styling (of a button in this case)
		 so that we can still set Back/Foreground and border colors in the button itself
		but still have mouseover etc working correctly-->

		<Style x:Key="GridColumnHeadersStyle" TargetType="DataGridColumnHeader">
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="Foreground" Value="{StaticResource Black0}"/>
			<Setter Property="Background" >
				<Setter.Value>
					<LinearGradientBrush StartPoint=".8,1" EndPoint=".1,0.93" >
						<GradientStop Color="red" Offset="3.1"/>
						<GradientStop Color="DarkOrange" Offset="0.5"/>
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<!--This handles the button being set on Mouse over -->
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Foreground"  Value="{StaticResource Black1}"/>
					<Setter Property="FontWeight"  Value="Bold"/>
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint=".5,0.63" EndPoint=".5,1" >
								<GradientStop Color="Green" Offset="0"/>
								<GradientStop Color="White" Offset="1"/>
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>

		</Style>


		<Style x:Key="RedToBlack" TargetType="DataGridColumnHeader"
			>
			<!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="Foreground" Value="{StaticResource Black0}"/>
			<Setter Property="Background" >
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0.5" EndPoint=".5,.6" >
						<GradientStop Color="red" Offset="1"/>
						<GradientStop Color="DarkOrange" Offset="0"/>
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<!--These do nothing at all, but the do demonstrate how to use 
			the {Binding xxx} to pass user defined values thru-->
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
						<GradientStop Color="Red" Offset="0"/>
						<GradientStop Color="#FFFFD190" Offset="1"/>
						<GradientStop Color="Black" Offset="1"/>
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" >
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,1" EndPoint="1,0" >
								<GradientStop Color="#F9A68B" Offset="0"/>
								<GradientStop Color="#6B1D04" Offset="1"/>
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>

			</Style.Triggers>
		</Style>

		<!--<ControlTemplate x:Key="asx" TargetType="{x:Type DataGridColumnHeader}">
			<Grid>
				<Ellipse Fill="Gray"/>
				<ContentPresenter     
                            Content="Submit"     
                            VerticalAlignment="Center"    
                            HorizontalAlignment="Center"/>
			</Grid>
		</ControlTemplate>-->


		<Style x:Key="HeaderStyleBlue" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushBlue}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushBlue}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushBlue}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="HeaderStyleGreen" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushGreen}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushGreen}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushGreen}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="HeaderStyleYellow" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushYellow}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushYellow}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushYellow}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--<Style x:Key="CenterText" TargetType="TextBox" >
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Foreground" Value="Red" />

		</Style>-->
		<!--Test of downloaded Datagrid column header Style-->
	</Window.Resources>

	<Grid GotFocus="Window_GotFocus"
		Visibility="Visible"
		>

		<Grid.RowDefinitions>
			<RowDefinition Height="15"/>
			<RowDefinition Height="35"/>
			<RowDefinition Height="20"/>
			<RowDefinition Height="65"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="20"/>
			<RowDefinition Height="30"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="10"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="25"/>
			<ColumnDefinition Width="10"/>
		</Grid.ColumnDefinitions>
		<Grid.Background>
			<!--create an elegant left to right light-> Dark gradient as a background-->
			<LinearGradientBrush EndPoint="0.0,1" StartPoint="1.3,0">
				<GradientStop Color="#333333" Offset="0"/>
				<GradientStop Color="lightGray" Offset="0.97"/>
			</LinearGradientBrush>
		</Grid.Background>
		
		<!--#region Checkboxes-->
		<WrapPanel 			
				Grid.Column="1"
				Grid.Row="2" 
				Grid.RowSpan="1" 
				Grid.ColumnSpan="6"
				HorizontalAlignment="Left"
				Margin="10,10,0,-5"
				Orientation="Horizontal" 
			>
			<CheckBox  
				x:Name="Id_option"
				Content="A/c Id#"
				FontWeight="Normal"
				Foreground="{StaticResource Black4}"
				Width="100"
				Height="35"
				Click="Id_option_Click"/>
			<CheckBox  
				x:Name="Custno_option"
				Content="Customer #"
				FontWeight="Medium"
				Foreground="{StaticResource Black2}"
				Width="100"
				Height="35"
				Click="Custno_option_Click"/>
			<CheckBox  
				x:Name="Bankno_option"
				Content="Bank #"
				Width="100"
				FontWeight="DemiBold"
				Foreground="{StaticResource Black0}"
				Height="35"
				Click="Bankno_option_Click"/>
			<CheckBox  
				x:Name="actype_option"
				Content="A/c Type #"
				FontWeight="Normal"
				Foreground="{StaticResource Gray4}"
				Width="100"
				Height="35"
				Click="actype_option_Click"/>
			<CheckBox  
				x:Name="Dob_option"
				Content="Birthday"
				FontWeight="DemiBold"
				Foreground="{StaticResource White1}"
				Width="100"
				Height="35"
				Click="Dob_option_Click"/>
			<CheckBox  
				x:Name="Odate_option"
				Content="A/c Opened"
				FontWeight="DemiBold"
				Foreground="{StaticResource White0}"
				Width="100"
				Height="35"
				Click="Odate_option_Click"/>
			<CheckBox  
				x:Name="Cdate_option"
				Content="A/c Closed"
				FontWeight="Bold"
				Foreground="{StaticResource White0}"
				Width="100"
				Height="35"
				Click="Cdate_option_Click"/>
			<CheckBox  
				x:Name="Default_option"
				Content="Default"
				FontWeight="Bold"
				Foreground="{StaticResource Green0}"
				IsChecked="True"
				Width="100"
				Height="35"
				Click="Default_option_Click"/>
		</WrapPanel>
		<!--#endregion Checkboxes-->

		<!--#region  buttonbar-->

		<TextBlock x:Name="ViewerBanner" 
				Grid.Row="1"
				Grid.Column="1"  
				Grid.RowSpan="1" Grid.ColumnSpan="2"
				Foreground="Red"
				Background="Aqua"
				TextAlignment="Center"
				FontWeight="Bold"
				Text="SQL DATABASE VIEWER - This Grid allows full editing capability, and will update the SQL source in real time"/>

		<Button 
				Background="{StaticResource HeaderBrushGray}"	
				Click="Minimize_click"
				Content="-v-"
				Foreground="White"
				Grid.Column="3"
				Grid.Row="1"
				Height="20"
				MouseDown="Window_MouseDown"
				Opacity="50"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				VerticalContentAlignment="Top"
				Visibility="Visible"
				Width="20"
				>

		</Button>
		<WrapPanel 
				Grid.Column="1" 
				Grid.ColumnSpan="3"
				Grid.Row="3" 
				Grid.RowSpan="1" 
				HorizontalAlignment="left"
				Margin="10"
				Orientation="Horizontal" 
			>
			<!--#region Buttons-->

			<!--Open new Db viewer Button-->
			<!--
			<Button x:Name="Duplicate" Width="85" Height="35" Margin="1"				 
				IsEnabled="true"
				Click="LoadNewViewer_Click"		  
				FontWeight="DemiBold"
				Content="New Viewer" 
				Background="{StaticResource HeaderBrushGray}"	
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				   >
			</Button>-->

			<!--Filter to multi a/c Button-->
			<Button x:Name="Edit" Width="65" Height="35" Margin="1"				 
				Background="{StaticResource HeaderBrushGray}"	
				Click="Edit_Click"		  
   				Content="Edit"
				FontWeight="DemiBold"
				Foreground="White"
				IsEnabled="true"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
 />
			<Button 
				x:Name="Filters" 
				Background="{StaticResource HeaderBrushGray}"	
				Click="SetFilter_Click"		  
				Content="Filtering"
				FontWeight="DemiBold"
				Foreground="White"
				Height="35" 
				IsEnabled="true"
				Margin="1"				 
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				Width="65" 
				/>
			<!--Multi Account Button-->
			<Button x:Name="Multiaccounts" Width="125" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				Click="Multiaccs_Click"
				FontWeight="DemiBold"
				Background="{StaticResource HeaderBrushGray}"	
				Foreground="White"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				Content="Multiple A/c's Only" >
			</Button>
			<Border x:Name="splitter" Width="5" Height="35" Margin="5,0,5,0"
				IsEnabled="true"
				Background="{StaticResource Orange1}"
				BorderBrush="black"
				BorderThickness="1"/>

			<!--Bank Account Button-->
			<Button x:Name="ShowBank" Width="130" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				   Tag="true;"
				Click="ShowBank_Click"
				Content="Bank A/c's (0)"
				MouseDown="Window_MouseDown"
				Background="{StaticResource HeaderBrushBlue}"	
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateBlue}" KeyDown="ShowBank_KeyDown"/>

			<!--Customer Account Button-->
			<Button x:Name="ShowCust" Width="145" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				Click="ShowCust_Click"
				Background="{StaticResource HeaderBrushYellow}"	
				Foreground="White"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateYellow}"
				Content="Customer A/c's (0)" />

			<!--Details Account Button-->
			<Button x:Name="ShowDetails" Width="125" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				Click="ShowDetails_Click"
				Background="{StaticResource HeaderBrushGreen}"	
				Foreground="White"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGreen}"
				Content="Details A/c's  (0)" >
			</Button>
			<!--Close Window Button-->
			<Button x:Name="CloseViewer"
				Width="85" Height="35" Margin="1"
				FontSize="11"
				IsEnabled="true"
				Focusable="True"				
				Content="Close Viewer"
				MouseDown="Window_MouseDown"
				Background="{StaticResource HeaderBrushRed}"	
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateRed}"
				Click="CloseViewer_Click">
			</Button>
			<!--#endregion Buttons-->
		</WrapPanel>
		<!--#endregion  buttonbar-->

		<Grid
			x:Name="WaitMessage"
			Background="Chocolate"
			Grid.Column="1"
			Grid.Row="4"
			Grid.ColumnSpan="3"
			Height="60"
			HorizontalAlignment="Center"
			Margin="0,0,0,0"
			RequestBringIntoView="TextBlock_RequestBringIntoView"
			VerticalAlignment="Bottom"
			Visibility="Visible"
			Width="400">
			<Grid.FocusVisualStyle>
				<Style/>
			</Grid.FocusVisualStyle>

			<TextBlock
				Background="Chocolate"
				Foreground="White"
				Grid.Row="0" 
				Grid.Column="0"
				HorizontalAlignment="Center"
				Margin="0,18"
				Text="Please  Wait, loading requested data from SQL Database system"
				Visibility="Visible"/>

		</Grid>

		<Grid Grid.Row="4"
			Grid.Column="1"  Grid.RowSpan="2"
			Grid.ColumnSpan="3">

			<!--b:DataGridBehaviour.FullRowSelect="true"-->
			<!--#region BankAccount data Grid-->
			<DataGrid x:Name="BankGrid" 
					AutoGenerateColumns="False"
					AlternatingRowBackground="{StaticResource Blue4}"
					BeginningEdit="BankGrid_BeginningEdit" 
					BorderThickness="0"
					CanUserSortColumns="False"
					CellEditEnding="BankGrid_CellEditEnding" 
					CanUserAddRows="False"
					ColumnHeaderHeight="25"
					ColumnHeaderStyle ="{StaticResource HeaderStyleBlue}"
					DataContext="BankAccountViewModel"
					Grid.ColumnSpan="3"
					GotFocus="BankGrid_GotFocus"
					HorizontalAlignment="Stretch"
					IsReadOnly="False"
					IsSynchronizedWithCurrentItem="True"			    
					LoadingRowDetails="BankGrid_LoadingRowDetails"
					MinHeight="320"
					MouseRightButtonUp="BankGrid_MouseRightButtonUp" 
					MouseRightButtonDown="BankGrid_MouseRightButtonDown" 
					RowEditEnding="ViewerGrid_RowEditEnding" 
					RowHeight="27"
					SelectedCellsChanged="BankGrid_SelectedCellsChanged"
					SelectionChanged="ItemsView_OnSelectionChanged"
					SelectionUnit="FullRow"
					TabIndex="1"	
					VerticalAlignment="Stretch"
					VerticalContentAlignment="Center"
					VerticalGridLinesBrush="{StaticResource Blue2}"				
					Visibility="Collapsed" >

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</DataGrid.Resources>

				<!--Not implemented just yet-->
				<!--
					<ContextMenu>
						<MenuItem Header="Add New Row"  Click="ContextMenu1_Click"/>
						<MenuItem Header="Delete current Row"  Click="ContextMenu2_Click"/>
						<MenuItem Header="Find ..."  Click="ContextMenuFind_Click"/>
						<Separator />
							<MenuItem Header="Close Viewer"  Click="ContextMenu3_Click"/>
					</ContextMenu>
				</DataGrid.ContextMenu>-->

				<DataGrid.Columns >
					<DataGridTemplateColumn Header="Id" Width="40"
									x:Name="ID">
						<DataGridTemplateColumn.CellTemplate >
							<DataTemplate >
								<TextBlock 
									Text="{Binding Id}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top"/>
							</DataTemplate >
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn >

					<DataGridTextColumn Header="Bank #" Width="80" 
									Binding ="{Binding BankNo, 
									Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus}"
									>
					</DataGridTextColumn>

					<DataGridTextColumn Header="Customer #" Binding="{Binding CustNo, 
									Mode=TwoWay, 
									UpdateSourceTrigger=PropertyChanged}">
					</DataGridTextColumn>


					<DataGridTextColumn Header="Type" Width="40" 
									Binding="{Binding AcType, 
									Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus}"/>

					<DataGridTextColumn Header="Balance" Width="90" 
									Binding="{Binding Balance, 
									Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus,
									StringFormat='£ ##,###,###.00'}"/>

					<!--<DataGridTemplateColumn Header="IntRate" Width="50">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding IntRate, StringFormat='#.##', Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus}" 										   
								   HorizontalAlignment="Center"
										   VerticalAlignment="Top"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<TextBox Text="{Binding IntRate}"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>-->

					<DataGridTextColumn Header="Interest" Width="60" 
									Binding="{Binding IntRate, Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus,
									StringFormat='0.00'}"/>

					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="Open Date" Width="80" >
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=ODate, 
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=ODate, 
									Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus}">
								</DatePicker>
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>

					<DataGridTemplateColumn Header="Close Date" Width="80" >
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate, 
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=CDate, 
									Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus}"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>

				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion BankAccount data Grid-->
		</Grid>

		<Grid Grid.Row="4"
			Grid.Column="1"  
			Grid.ColumnSpan="2"
			Grid.RowSpan="2">

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="727*"/>
				<ColumnDefinition Width="65*"/>
			</Grid.ColumnDefinitions>

			<!--#region Customers data Grid-->
			<DataGrid x:Name="CustomerGrid" 
				AlternatingRowBackground="{StaticResource Yellow3}"
				AutoGenerateColumns="False" 					
				BeginningEdit="CustomerGrid_BeginningEdit"
				BorderBrush="{StaticResource Yellow3}"
				BorderThickness="2"
				CanUserAddRows="false" 
				CanUserSortColumns="False"
				CellEditEnding="CustomerGrid_CellEditEnding" 
				ColumnHeaderHeight="25"
				ColumnHeaderStyle ="{StaticResource HeaderStyleYellow}" 
				CurrentCellChanged="CustomerGrid_CurrentCellChanged" 
				DataContext="CustomerViewModel"
				 GotFocus="CustomerGrid_GotFocus"
				Grid.ColumnSpan="2"
				IsSynchronizedWithCurrentItem="True"			    
				MinHeight="300"
				RowEditEnding="ViewerGrid_RowEditEnding"
				RowHeight="27"
				SelectedCellsChanged="CustomerGrid_SelectedCellsChanged" 
				SelectionChanged="ItemsView_OnSelectionChanged"
				TargetUpdated="CustomerGrid_TargetUpdated"  
				TabIndex="2"
				VerticalGridLinesBrush="{StaticResource Orange0}"
				Visibility="Collapsed" 
				Margin="0,0,-25,0" >
				<!--MouseDown="CustomerGrid_MouseDown"-->
				<!--VerticalContentAlignment="Center"-->
				<!--PreparingCellForEdit="CustomerGrid_PreparingCellForEdit"-->
				<!--Initialized="CustomerGrid_Initialized_1"-->
				<!--SourceUpdated="CustomerGrid_SourceUpdated"-->
				<!--IsSynchronizedWithCurrentItem="True"-->

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</DataGrid.Resources>

				<DataGrid.Columns>
					<!--Force column to be Read only-->
					<DataGridTemplateColumn Header="Id" Width="40"  									>
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Id}" 
 									HorizontalAlignment="Center"
									VerticalAlignment="Center"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<DataGridTextColumn Header="Bank #" Width="70" 
									Binding="{Binding BankNo, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
					<DataGridTextColumn Header="Customer #" Width="70" 
									Binding="{Binding CustNo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Type" Width="30" 
									Binding="{Binding AcType, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
					<DataGridTextColumn Header="First Name" Width="80" 
									Binding="{Binding FName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Surname" Width="80" 
									Binding="{Binding LName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Address 1" Width="130" 
									Binding="{Binding Addr1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Address 2" Width="120" 
									Binding="{Binding Addr2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Town" Width="80" 
									Binding="{Binding County, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="County" Width="70" 
									Binding="{Binding County, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="PostCode" Width="80" 
									Binding="{Binding PCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Phone #" Width="80" 
									Binding="{Binding Phone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Mobile" Width="80" 
									Binding="{Binding Mobile, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Birthday" Width="80" 
									Binding="{Binding Dob, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged }"/>
					<DataGridTextColumn Header="A/c Opened" 
									Binding ="{Binding Path=ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="A/c Closed" Width="80" >
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate, 
									Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
									StringFormat='dd/MM/yyyy'}"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<!--<DataGridTemplateColumn Header="Close Date" Width="80" >
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate, 
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=CDate, 
									Mode=TwoWay, 
									UpdateSourceTrigger=PropertyChanged}"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>-->


				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion Customers data Grid-->
		</Grid>

		<Grid Grid.Row="4"
			Grid.Column="1"  
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<!--#region DetailsViewModel data Grid-->
			<DataGrid x:Name="DetailsGrid" 
					AlternatingRowBackground="{StaticResource Green3}"
					AutoGenerateColumns="False" 
					BeginningEdit="DetailsGrid_BeginningEdit"
					BorderThickness="2"
					BorderBrush="{StaticResource Green3}"
					CanUserSortColumns="False"
					CanUserAddRows="false" 
					CellEditEnding="DetailsGrid_CellEditEnding" 
					DataContext="DetailsViewModel"
					ColumnHeaderStyle ="{StaticResource HeaderStyleGreen}" 
					GotFocus="DetailsGrid_GotFocus"
					Grid.ColumnSpan="3"
					IsSynchronizedWithCurrentItem="True"
					MinHeight="320"
					RowEditEnding="ViewerGrid_RowEditEnding"
					RowHeight="27"
					SelectionChanged="ItemsView_OnSelectionChanged" 
					TabIndex="3"
					Visibility="Collapsed"
					VerticalAlignment="Stretch"
					VerticalContentAlignment="Center"
					VerticalGridLinesBrush="{StaticResource Green0}" 
					>

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</DataGrid.Resources>

				<DataGrid.Columns>
					<DataGridTemplateColumn Header="Id" Width="40" >
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Id}" 
 									HorizontalAlignment="Center"
									VerticalAlignment="Center"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<DataGridTextColumn Header="Bank #" Width="80" 
									Binding="{Binding BankNo, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
					<DataGridTextColumn Header="Customer #" Width="80" 										
									Binding="{Binding CustNo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<DataGridTextColumn Header="Type" Width="40" 
									Binding="{Binding AcType, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
					<DataGridTextColumn Header="Balance" Width="90" 
									SortMemberPath="Balance"
									Binding="{Binding Balance, 
									Mode=TwoWay, 
									UpdateSourceTrigger=LostFocus,
									StringFormat='£##,###,###.00'}"/>
					<DataGridTextColumn Header="Interest" Width="60" 
									SortMemberPath="IntRate"
									Binding="{Binding IntRate, Mode=TwoWay, 
									StringFormat='##.00 ',
									UpdateSourceTrigger=LostFocus}"/>
					<DataGridTextColumn Header="A/c Opened" 
									Binding ="{Binding Path=ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="A/c Closed" Width="80" SortMemberPath="CDate">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate, 
									Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
									StringFormat='dd/MM/yyyy'}"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>

					<!--<DataGridTextColumn Header="Opened" Width="80" 
									Binding="{Binding ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

					<DataGridTextColumn Header="Closed" Width="80" 
									Binding="{Binding CDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>-->
				</DataGrid.Columns>
			</DataGrid>
			<!--<DataGridTextColumn Header="Opened" Width="80" 
									Binding="{Binding ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
										Converter={StaticResource dateOnlyConverter}}"/>
			<DataGridTextColumn Header="Closed" Width="80" 
									Binding="{Binding CDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
										Converter={StaticResource dateOnlyConverter}}"/>-->

			<!--#endregion DetailsViewModel data Grid-->

		</Grid>
		<TextBlock 
			x:Name="StatusBar"
				Background="Beige"	
				Foreground="Black"
				Grid.Row="6" Grid.Column="1"
				Grid.ColumnSpan="3"		
				Height="25" 
				HorizontalAlignment="Left"
				Margin="0,0,0,-30"
				Padding="3"
				Text="Please wait, loading data from SQL Database...."
				TextAlignment="Center"
				VerticalAlignment="Center"
				Width="815"/>
	</Grid>
</Window>
