<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WPFPages.Dicts">


	<ControlTemplate x:Key="GradientButtonTemplateBlue" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="Button.Tag" Value="True">
				<!--<Setter Property="Button.BorderBrush" TargetName="border" Value="{StaticResource Red0}"/>-->
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBrushBlue}"/>
				<!--<Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Red1}"/>-->
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource Green3}"/>
				<Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Red0}"/>
				<Setter Property="Button.BorderBrush" TargetName="border" Value="Red"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Button.Background" TargetName="border" Value="#698596"/>
				<Setter Property="Button.BorderBrush" TargetName="border" Value="Black"/>
				<Setter Property="Button.Foreground" TargetName="border" Value="#555555"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource White2}"/>
				<Setter Property="Button.FontWeight" Value="Bold"/>
				<Setter Property="Button.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
							<GradientStop Color="red" Offset="0"/>
							<GradientStop Color="DarkOrange" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<!--We would probably use this at App level to standardize all our "std" buttons as we can always overwrite it
		inside other files if required-->

	<ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="Button.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<Setter Property="Background" TargetName="border" Value="Green"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<!--<Trigger Property="IsFocused" Value="True">
					<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
					<Setter Property="Background" TargetName="border" Value="Gray"/>
					<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				</Trigger>-->

			<Trigger Property="IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<Setter Property="Foreground"  Value="White"/>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
							<GradientStop Color="red" Offset="0"/>
							<GradientStop Color="DarkOrange" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<!--<Setter Property="BorderBrush" TargetName="border">
						<Setter.Value>
							<Setter Property="Foreground" Value="SolidColorBrush"/>
						</Setter.Value>
					</Setter>-->
				<!--<Setter Property="Background" TargetName="border" Value="Blue"/>
					<Setter Property="BorderBrush" TargetName="border" Value="White"/>
					<Setter Property="Foreground"  Value="White"/>
					<Setter Property="BorderThickness" TargetName="border" Value="2"/>-->
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>

			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="LightBlue"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--*******************************************************************-->
	<!--This is the main SQL Viewer window button styling template-->
	<!--*******************************************************************-->	<!--This is what we are using for SQL viewer buttons-->
	<ControlTemplate x:Key="HorizontalGradientTemplateRed" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#ff4f2225" Offset="0.314"/>
							<GradientStop Color="#FF9c2129" Offset="0.553"/>
							<GradientStop Color="#FFdb6069" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#ff4f2225" Offset="0.314"/>
							<GradientStop Color="#FF9c2129" Offset="0.553"/>
							<GradientStop Color="#FFdb6069" Offset="1"/>
						</LinearGradientBrush>

						<!--<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
							<GradientStop Color="Gray" Offset="0"/>
							<GradientStop Color="DarkOrange" Offset="1"/>
						</LinearGradientBrush>-->
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
			<!--<Trigger Property="ContentPresenter" Value="Reset">
				--><!--Handles disabled status--><!--
				<Setter Property="Background" TargetName="border" Value="Green"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>-->
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGradientTemplateYellow" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#FF595013" Offset="0.514"/>
							<GradientStop Color="#FF7d7015" Offset="0.753"/>
							<GradientStop Color="#F5d816" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF595013" Offset="0.314"/>
							<GradientStop Color="#FF7d7015" Offset="0.553"/>
							<GradientStop Color="#F5d816" Offset="1"/>
						</LinearGradientBrush>

						<!--<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
							<GradientStop Color="Gray" Offset="0"/>
							<GradientStop Color="DarkOrange" Offset="1"/>
						</LinearGradientBrush>-->
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<ControlTemplate x:Key="HorizontalGradientTemplateGreen" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF1D4855" Offset="1"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="#FF0AEAFA" Offset="0.314"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF224022" Offset="0.314"/>
							<GradientStop Color="#FF336633" Offset="0.553"/>
							<GradientStop Color="#FF00FF00" Offset="1"/>
						</LinearGradientBrush>

						<!--<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
							<GradientStop Color="Gray" Offset="0"/>
							<GradientStop Color="DarkOrange" Offset="1"/>
						</LinearGradientBrush>-->
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>	

	<ControlTemplate x:Key="HorizontalGradientTemplateBlue" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Control.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF1D4855" Offset="1"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="Black" Offset="0.314"/>
							<!--<GradientStop Color="#FF0AEAFA" Offset="0.314"/>-->
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF1D4855" Offset="0.314"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="#FF0AEAFA" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Black0}"/>
				<!--<Setter Property="BorderThickness" TargetName="border" Value="{StaticResource Black0}"/>-->
				<!--<Setter Property="Control.Foreground" TargetName="border" Value="{StaticResource Gray1}"/>-->
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<ControlTemplate x:Key="HorizontalGradientTemplateGray" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
					Opacity="100"
					CornerRadius="5"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Control.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#d1d0d6" Offset="1"/>
							<GradientStop Color="#98979c" Offset="0.553"/>
							<GradientStop Color="#4f4e52" Offset="0.314"/>
							<!--<GradientStop Color="#FF0AEAFA" Offset="0.314"/>-->
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#4f4e52" Offset="0.314"/>
							<GradientStop Color="#98979c" Offset="0.553"/>
							<GradientStop Color="#d1d0d6" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<!--*******************************************************************-->
	<!--This is END of main SQL Viewer window button styling template-->
	<!--*******************************************************************-->

</ResourceDictionary>